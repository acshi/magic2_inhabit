
alarm {
    batteryVoltage = 25.9;     // in volts
    startupInhibitTime = 15.0; // inhibit alarms for this many seconds after startup.
    repeatInhibitTime = 8.0;   // don't repeat alarms faster than this (per event)
    maxAlarms = 5; // don't alarm more than this many times (per event)
    //espeak_args = "english:p90:a200";

    // integrate rates over what period? (seconds)
    // (larger values provide more "slush")
    lcm_rates_period = 6.0;

    // min/max rates for LCM channels. (nominal rates in comments for reference)
    lcm_rates {
        //HOKUYO_LIDAR = [ 30 50 ];    // 40
        VELODYNE_DATA = [ 720 780 ];   // 753
        POSE = [ 50 110 ];             // 100
        ROBOT_MAP_DATA = [ 3 7 ];      // 5
        //DWM_RANGE = [ 1 80 ];        // 60
        //IMAGE = [ 3 6 ];             // 5
    }

    ignore_on_estop = [ "HOOP_SKIRT" ];
}

servo_hokuyo {
    device = "/dev/ttyUSB0";                // XXX serial device (TEMPORARY)

    position = [0.266, 0.0, 0.476];         // XXX Robot coordss of the servo (main axis) at attachment
    rollpitchyaw_degrees = [0, 0, 0];       // Orientation of servo relative to robot
    axis_to_mirror_offset = 0.03;           // Length between rotation axis and sensor mirror
    max_range = 29.5;
    min_range = 0.5; // prevent us from seeing the robot itself.
    zoff = 0.026;    // height from hokuyo optical center to servo

    servo_num = 1;                          // Servo number of I2C bus
    servo_min_angle_degrees = -55;          // minimum angle the controller will allow
    servo_max_angle_degrees = 20;           // maximum angle the controller will allow
    servo_status_period_ms = 25;            // how frequently the servo status is checked and published
    servo_speed = 0.1;                      // servo speed when moving
    servo_default_angle_degrees = -40;      // Angle the servo is set to when not being told otherwise
    publish_channel = "DYNAMIXEL_STATUS_HOKUYO";

    servo_angle_inverted = false;           // RHR the same as robot's frame?
    servo_pause_on_tasks = [0, 1];          // XXX Servo freezes for these robot tasks

    // hallucinated points filtering terms
    filter {
        enable          = true;
        min_distance     = 0.20;             // required spacing between points before colinearity is considered
        min_projection   = 0.02;             // projection error allowed such that a point is considered colinear
    }

}

robot {
    geometry {
        width = 0.559; // meters
    }
}

imu {
    gyro2rad = 0.000266316;   // +/- 500 deg/s range
    acc2g = 0.00012207;       // +/- 4 g range

    kp = 0.001;
    ki = 0.0001;
    accel_nsamples = 20;
    gyro_nsamples = 50;
    min_covariance = 1e-6;
    process_covariance = 5e-7;
}
