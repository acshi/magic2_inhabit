
alarm {
    batteryVoltage = 25.9;     // in volts
    startupInhibitTime = 15.0; // inhibit alarms for this many seconds after startup.
    repeatInhibitTime = 8.0;   // don't repeat alarms faster than this (per event)
    maxAlarms = 5; // don't alarm more than this many times (per event)
    //espeak_args = "english:p90:a200";

    // integrate rates over what period? (seconds)
    // (larger values provide more "slush")
    lcm_rates_period = 6.0;

    // min/max rates for LCM channels. (nominal rates in comments for reference)
    lcm_rates {
        //HOKUYO_LIDAR = [ 30 50 ];    // 40
        VELODYNE_DATA = [ 720 780 ];   // 753
        POSE = [ 50 110 ];             // 100
        ROBOT_MAP_DATA = [ 3 7 ];      // 5
        //DWM_RANGE = [ 1 80 ];        // 60
        //IMAGE = [ 3 6 ];             // 5
    }

    ignore_on_estop = [ "HOOP_SKIRT" ];
}

robot_drive {
    repulsive_distance = 1.0;
    collision_distance = 0.2;
    repulsive_strength = 2.0; // rel to goal attraction
    attractive_distance = 0.25; // switch to parabolic
    max_speed = 1.0; // pwm
    st_gain = 0.8;  // nom speed to goal
    trn_gain = 0.8; // mapping of degrees force error to pwm
    trn_max = 0.6; // max turn pwm
    turn_discount = 0.5; //max forward speed is reduced
}

robot {
    geometry {
        width = 0.60; // meters
        length = 0.73;
    }
}

drive_to_wp {
    control_update_hz = 100;
    vfh_update_every = 10; // e.g. 100hz/10 = 10hz total
    print_update_every = 2;

    // low-level driving/pwm part
    max_velocity = 0.4; // in m/s

     // robot moves fast forwards when heading is 'correct' by this definition
    heading_epsilon = 0.01;


    velocity_kb = 0.4; // proportional in velocity
    velocity_kp = 0.4; // proportional in error
    velocity_ki = 1.0;
    velocity_kd = 0;
    velocity_imax = 0.2; // integral wind-up max
    velocity_outmax = 0.25; // max pwm from velocity alone
    velocity_derivative_lowpass_hz = 20;

    heading_kb = 0; // unused (setpoint fixed at 0)
    heading_kp = 0.7; // proportional in error
    heading_ki = 20.0;
    heading_kd = 0.1;
    heading_imax = 0.15; // integral wind-up max
    heading_outmax = 0.35; // max pwm from heading alone
    heading_derivative_lowpass_hz = 10;

    motor_low_pass_freq = 1;

    // collision avoidance part
    min_side_turn_distance = 0.2;
    min_side_back_distance = 0.16; // since we can't see as well behind us, forward uses 0
    min_forward_distance = 0.6;
    min_forward_per_mps = 0.6; // mps = meters per second
}

drive_to_wp.vfh_star {
    polar_sections = 90;
    wide_opening_size = 2;
    active_diameter = 4.0;
    max_magnitude = 10.0;
    planning_clearance = 0.2;
    step_distance = 0.4; // use approximate diameter of robot
    goal_depth = 3;
    discount_factor = 0.8;
    polar_density_traversable = 750.0;
    polar_density_occupied = 850.0;
    cost_goal_oriented = 5;
    cost_smooth_path = 2;
    cost_smooth_commands = 2;
    cost_proj_goal_oriented = 5;
    cost_proj_smooth_path = 1;
    cost_proj_smooth_commands = 1;
}

imu {
    gyro2rad = 0.000266316;   // +/- 500 deg/s range
    acc2g = 0.00012207;       // +/- 4 g range

    kp = 0.001;
    ki = 0.0001;
    accel_nsamples = 20;
    gyro_nsamples = 50;
    min_covariance = 1e-6;
    process_covariance = 5e-7;
}
